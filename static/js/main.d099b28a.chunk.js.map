{"version":3,"sources":["containers/BreakSetup.js","actions/index.js","containers/SessionSetup.js","containers/Timer.js","containers/Controls.js","containers/Footer.js","App.js","reducers/CounterReducer.js","reducers/Reducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["BreakSetup","handleBtnActionIncrement","props","onIncrementClick","breakLength","handleBtnActionDecrement","onDecrementClick","this","id","onClick","class","Component","connect","state","reducer","dispatch","type","SessionSetup","sessionLength","Timer","time","padZero","partialTime","Math","floor","timerValue","breakOn","styleSession","color","styleBreak","style","mmssTimeFormat","timerOn","Controls","handleBtnActionStartStop","clearTimeout","handlerTimer","onStartStopClick","handleBtnActionReset","onResetClick","handleToggleTimer","onToggleTimer","resetOn","setTimeout","onTickTimer","className","Footer","playSound","document","getElementById","play","pauseSound","pause","currentTime","preload","src","defer","React","App","initialState","count","CounterReducer","action","Reducer","combineReducers","counter","store","createStore","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d099b28a.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {incrementBreakCount, decrementBreakCount} from '../actions/index'\n\nclass BreakSetup extends Component{\n\n    handleBtnActionIncrement = () => {\n        this.props.onIncrementClick(this.props.breakLength)\n    }\n\n    handleBtnActionDecrement = () => {\n        this.props.onDecrementClick(this.props.breakLength)\n    }\n\n\n    render() {\n        const {breakLength}=this.props\n            return(\n                <div id=\"break-container\">\n                    <div id=\"break-label\">Break Length</div>\n                    <div id=\"break-decrement\" onClick={this.handleBtnActionDecrement}><span class=\"fas fa-minus\"></span></div>\n                    <div id=\"break-length\">{breakLength}</div>\n                    <div id=\"break-increment\" onClick={this.handleBtnActionIncrement}><span class=\"fas fa-plus\"></span></div>\n                </div>\n            )\n        }\n    }\n\n\n    const mapStateToProps = (state) => {\n        return {\n            breakLength: state.reducer.breakLength\n        }\n    }\n\n    const mapDispatchToProps = (dispatch) => {\n        return {\n            onIncrementClick: (breakLength) => {  \n                if (breakLength < 60)\n                    dispatch(incrementBreakCount(breakLength))\n            },\n            onDecrementClick: (breakLength) => {\n                if (breakLength > 1) \n                    dispatch(decrementBreakCount(breakLength))\n            }\n        }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BreakSetup)","export const incrementCount = count => {\n    //const num = count+1\n    return {\n    type: 'INCREMENT_COUNT',\n    //count: num\n    }\n  }\n  \n  export const decrementCount = count => {\n    //const num = count - 1\n    return {\n      type: 'DECREMENT_COUNT',\n      //count: num\n    }\n  }\n\n  export const incrementBreakCount = count => {\n    return {\n    type: 'BREAK_INCREMENT',\n    }\n  }\n  \n  export const decrementBreakCount = count => {\n    return {\n      type: 'BREAK_DECREMENT',\n    }\n  }\n\n  export const incrementSessionCount = count => {\n    return {\n      type: 'SESSION_INCREMENT',\n    }\n  }\n    \n  export const decrementSessionCount = count => {\n    return {\n      type: 'SESSION_DECREMENT',\n    }\n  }\n\n  export const startStopTimer = () => {\n    /* console.log(\"startStopTimer\"); */\n    return {\n      type: 'STARTSTOP_TIMER',\n    }\n  }\n\n  export const resetTimer = () => {\n    return {\n      type: 'RESET_TIMER',\n    }\n  }\n\n  export const tickTimer = (timerValue) => {\n    /* console.log(\"tickTimer\");\n    console.log(\"timerValue: \"+timerValue); */\n    return {\n      type: 'TICK_TIMER',\n    }\n  }\n\n  export const toggleTimer = () => {\n    return {\n      type: 'TOGGLE_TIMER',\n    }\n  }","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {incrementSessionCount, decrementSessionCount} from '../actions/index'\n\nclass SessionSetup extends Component{\n\n    handleBtnActionIncrement = () => {\n        this.props.onIncrementClick(this.props.sessionLength)\n    }\n\n    handleBtnActionDecrement = () => {\n        this.props.onDecrementClick(this.props.sessionLength)\n    }\n\n\n    render() {\n        const {sessionLength}=this.props\n            return(\n                <div id=\"session-container\">\n                    <div id=\"session-label\">Session Length</div>\n                    <div id=\"session-decrement\" onClick={this.handleBtnActionDecrement}><span class=\"fas fa-minus\"></span></div>\n                    <div id=\"session-length\">{sessionLength}</div>\n                    <div id=\"session-increment\" onClick={this.handleBtnActionIncrement}><span class=\"fas fa-plus\"></span></div>\n                </div>\n            )\n        }\n    }\n\n\n    const mapStateToProps = (state) => {\n        return {\n            sessionLength: state.reducer.sessionLength\n        }\n    }\n\n    const mapDispatchToProps = (dispatch) => {\n        return {\n            onIncrementClick: (sessionLength) => {  \n                if (sessionLength < 60)\n                    dispatch(incrementSessionCount(sessionLength))\n            },\n            onDecrementClick: (sessionLength) => {\n                if (sessionLength > 1) \n                    dispatch(decrementSessionCount(sessionLength))\n            }\n        }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SessionSetup)","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nclass Timer extends Component{\n\n    handleBtnActionIncrement = () => {\n        this.props.onIncrementClick(this.props.breakLength)\n    }\n\n    handleBtnActionDecrement = () => {\n        this.props.onDecrementClick(this.props.breakLength)\n    }\n\n    mmssTimeFormat(time) {\n        const padZero = (partialTime) => partialTime<10 ? '0'+partialTime : partialTime;\n        const mm = padZero(Math.floor(time/60));\n        const ss = padZero(time%60);\n\n        return mm+\":\"+ss;\n    }\n\n    render() {\n        const {timerValue, breakOn}=this.props;\n\n        const styleSession = {color: 'black'};\n        const styleBreak = {color: 'red'};\n\n            return(\n                <div id=\"timer-container\">\n                    <div id=\"timer-label\" style={!breakOn ? styleSession:styleBreak}>{!breakOn ? \"Session\":\"Break\"}</div>\n                    <div id=\"time-left\"   style={!breakOn ? styleSession:styleBreak}>{this.mmssTimeFormat(timerValue)}</div>\n                </div>\n            )\n        }\n    }\n\n\n    const mapStateToProps = (state) => {\n        return {\n            timerValue: state.reducer.timerValue, \n            timerOn: state.reducer.timerOn,\n            breakOn: state.reducer.breakOn\n        }\n    }\n\n    const mapDispatchToProps = (dispatch) => {\n        return {\n        }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer)","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {startStopTimer, resetTimer, tickTimer, toggleTimer} from '../actions/index'\n\nclass Controls extends Component{    \n    constructor() {\n        super();\n\n        let handlerTimer = null;\n    }\n\n    handleBtnActionStartStop = () => {\n        if (this.props.timerOn)\n            clearTimeout(this.handlerTimer);\n        this.props.onStartStopClick(this.props.timerValue);\n    }\n\n    handleBtnActionReset = () => {\n        clearTimeout(this.handlerTimer);\n        this.props.onResetClick(this.props.sessionLength)\n    } \n\n    handleToggleTimer = () => {\n        this.props.onToggleTimer()\n    }\n \n    render() {\n            const { timerValue, timerOn, resetOn}=this.props;\n                        \n            if (timerOn && (resetOn === false)) {\n                if (timerValue < 0)\n                    this.handleToggleTimer();\n                else {\n                    this.handlerTimer = setTimeout(() => {\n                    this.props.onTickTimer(timerValue);\n                    }, 1000);\n                }\n            }\n\n            return(\n                <div id=\"controls-container\">\n                    {/* <div id=\"session-label\">Session Length</div> */}\n                    <span id=\"start_stop\" onClick={this.handleBtnActionStartStop}><span className=\"fas fa-play\"></span><span class=\"fas fa-pause\"></span> </span>\n                    <span id=\"reset\" onClick={this.handleBtnActionReset}><span class=\"fas fa-redo-alt\"></span></span>\n                </div>\n            )\n        }\n    }\n\n\n    const mapStateToProps = (state) => {\n        return {\n            timerValue: state.reducer.timerValue,\n            timerOn: state.reducer.timerOn,\n            resetOn: state.reducer.resetOn\n        }\n    }\n\n    const mapDispatchToProps = (dispatch) => {\n        return {\n            onStartStopClick: (timerValue) => {  \n                dispatch(startStopTimer())\n            },\n            onResetClick: () => {\n                dispatch(resetTimer())\n            },\n            onTickTimer: (timerValue) => {\n                dispatch(tickTimer(timerValue))\n            }, \n            onToggleTimer: () => {\n                dispatch(toggleTimer())\n            }\n        }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls)","import React from 'react';\nimport {connect} from 'react-redux'\n\nclass Footer extends React.Component {\n    playSound = () => {\n        document.getElementById(\"beep\").play();\n    }\n    pauseSound = () => {\n        document.getElementById(\"beep\").pause();\n        document.getElementById(\"beep\").currentTime = 0;\n    }\n\n    render() {\n        const {timerValue, resetOn} = this.props;\n\n        if (timerValue === 0){\n            this.playSound();\n        }\n        if (resetOn)\n            this.pauseSound();\n\n        return (\n            <div className=\"footer-container\">\n                <p>Designed and <span class=\"fas fa-code\"></span> by Sergio Barbosa</p>\n                <p><span class=\"fab fa-sass\"></span> <span class=\"fab fa-react\"></span></p>\n                <audio id=\"beep\" preload=\"auto\">\n                    <source src=\"https://goo.gl/65cBl1\" defer></source>\n                </audio>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timerValue: state.reducer.timerValue,\n        timerOn: state.reducer.timerOn,\n        resetOn: state.reducer.resetOn\n    }\n}\n\nexport default connect (mapStateToProps)(Footer);\n","import React from 'react';\nimport './App.scss';\nimport BreakSetup from './containers/BreakSetup';\nimport SessionSetup from './containers/SessionSetup';\nimport Timer from './containers/Timer';\nimport Controls from './containers/Controls';\nimport Footer from './containers/Footer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <BreakSetup />\n        <SessionSetup />\n        <Timer />\n        <Controls />\n        <Footer />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const initialState = {\n    count: 0\n}\n\nconst CounterReducer = (state = initialState, action) => {\n    switch(action.type){\n        case \"INCREMENT_COUNT\": {\n            //return {...state, ...action}\n            return {...state, count: state.count + 1}\n        }\n        case \"DECREMENT_COUNT\": {\n            //return {...state, ...action}\n            return {...state, count: state.count - 1}\n        }\n        default:\n            return state\n    }\n} \n\nexport default CounterReducer","const initialState = {\n    breakLength: 5, \n    sessionLength: 25, \n    timerValue: 25*60,\n    timerOn: false,\n    breakOn: false,\n    resetOn: false\n}\n\nconst Reducer = (state = initialState, action) => {\n    switch(action.type){\n        case \"BREAK_INCREMENT\": {\n            //return {...state, ...action}\n            return {...state, breakLength: state.breakLength + 1}\n        }\n        case \"BREAK_DECREMENT\": {\n            //return {...state, ...action}\n            return {...state, breakLength: state.breakLength - 1}\n        }\n        case \"SESSION_INCREMENT\": {\n            //return {...state, ...action}\n            return {...state, sessionLength: state.sessionLength + 1, timerValue: (state.sessionLength + 1) * 60}\n        }\n        case \"SESSION_DECREMENT\": {\n            //return {...state, ...action}\n            return {...state, sessionLength: state.sessionLength - 1, timerValue: (state.sessionLength - 1) * 60}\n        }\n        case \"STARTSTOP_TIMER\": {\n            return {...state, timerOn: !state.timerOn, resetOn: false}\n        }\n        case \"RESET_TIMER\": {\n            return {...initialState, resetOn: !state.resetOn}\n        }\n        case \"TICK_TIMER\": {\n            /* console.log(\"case TICK_TIMER\"); */\n            return {...state, timerValue: state.timerValue - 1}\n        }\n        case \"TOGGLE_TIMER\": {\n            /*console.log(\"case TOGGLE_TIMER\");*/\n            if (state.breakOn)\n                return {...state, timerValue: state.sessionLength * 60, breakOn: false}\n            else\n                return {...state, timerValue: state.breakLength * 60, breakOn: true}\n        }\n\n        default:\n            return state\n    }\n} \n\nexport default Reducer;","import {combineReducers} from 'redux'\nimport CounterReducer from '../reducers/CounterReducer'\nimport Reducer from '../reducers/Reducer';\n\nexport default combineReducers({\n    counter: CounterReducer,\n    reducer: Reducer\n})","import {/* applyMiddleware, */ createStore} from 'redux'\n//import logger from 'redux-logger'\nimport rootReducer from '../reducers'\n\nconst store = createStore(rootReducer/* , applyMiddleware(\n    logger\n) */)\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\n// import CounterComponent from './containers/CounterComponent'\nimport store from './store'\n\nimport * as serviceWorker from './serviceWorker';\n\n\n// ReactDOM.render(<Provider store={store}><CounterComponent /></Provider>, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}